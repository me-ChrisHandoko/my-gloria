// This is your Prisma schema file integrated with Clerk Auth and existing data_karyawan table
// Learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  schemas  = ["gloria_master", "gloria_ops"] // Multi-schema support
}

// ==================== EXISTING TABLE INTEGRATION ====================

// Map to existing gloria_master.data_karyawan table (READ-ONLY from Prisma)
model DataKaryawan {
  nip                   String              @id @map("nip") @db.VarChar(15)
  nama                  String?             @map("nama") @db.VarChar(109)
  jenisKelamin          String?             @map("jenis_kelamin") @db.VarChar(1)
  tglMulaiBekerja       DateTime?           @map("tgl_mulai_bekerja") @db.Timestamp(6)
  tglTetap              DateTime?           @map("tgl_tetap") @db.Timestamp(6)
  status                String?             @map("status") @db.VarChar(10)
  waktuKerjaKependidikan String?            @map("waktu_kerja_kependidikan") @db.VarChar(10)
  bagianKerja           String?             @map("bagian_kerja") @db.VarChar(50)
  lokasi                String?             @map("lokasi") @db.VarChar(20)
  bidangKerja           String?             @map("bidang_kerja") @db.VarChar(70)
  jenisKaryawan         String?             @map("jenis_karyawan") @db.VarChar(20)
  statusAktif           String?             @map("status_aktif") @db.VarChar(8)
  noPonsel              String?             @map("no_ponsel") @db.VarChar(25)
  email                 String?             @map("email") @db.VarChar(100)
  birthdate             DateTime?           @map("birthdate") @db.Timestamp(6)
  rfid                  String?             @map("rfid") @db.VarChar(100)
  
  // Relations to new tables
  userProfile           UserProfile?
  
  @@map("data_karyawan")
  @@schema("gloria_master")
}

// ==================== USER PROFILE (Clerk Integration) ====================

// UserProfile links Clerk user to data_karyawan and permissions
model UserProfile {
  id                String              @id @default(cuid())
  clerkUserId       String              @unique @map("clerk_user_id") // Clerk user ID
  nip               String              @unique @map("nip") @db.VarChar(15)
  dataKaryawan      DataKaryawan        @relation(fields: [nip], references: [nip])
  isSuperadmin      Boolean             @default(false) @map("is_superadmin")
  isActive          Boolean             @default(true) @map("is_active")
  lastActive        DateTime?           @map("last_active")
  preferences       Json?               // User preferences/settings
  createdAt         DateTime            @default(now()) @map("created_at")
  updatedAt         DateTime            @updatedAt @map("updated_at")
  createdBy         String?             @map("created_by") // Clerk user ID who created this
  
  // Relations
  positions         UserPosition[]
  roles             UserRole[]
  moduleAccess      UserModuleAccess[]
  overrides         UserOverride[]
  createdRequests   Request[]           @relation("RequesterRelation")
  approvalSteps     ApprovalStep[]      @relation("ApproverRelation")
  delegationsFrom   ApprovalDelegation[] @relation("DelegatorRelation")
  delegationsTo     ApprovalDelegation[] @relation("DelegateRelation")
  notifications     Notification[]
  auditLogs         AuditLog[]          @relation("ActorRelation")
  targetAuditLogs   AuditLog[]          @relation("TargetRelation")
  
  @@index([clerkUserId])
  @@index([nip])
  @@map("user_profiles")
  @@schema("gloria_ops")
}

// ==================== ORGANIZATIONAL STRUCTURE ====================

// Map lokasi from data_karyawan
model School {
  id                String              @id @default(cuid())
  code              String              @unique
  name              String
  lokasi            String?             // Maps to data_karyawan.lokasi
  address           String?
  phone             String?
  email             String?
  principal         String?             // Kepala Sekolah name
  isActive          Boolean             @default(true) @map("is_active")
  createdAt         DateTime            @default(now()) @map("created_at")
  updatedAt         DateTime            @updatedAt @map("updated_at")
  
  // Relations
  departments       Department[]
  positions         Position[]
  
  @@map("schools")
  @@schema("gloria_ops")
}

// Map bagian_kerja and bidang_kerja from data_karyawan
model Department {
  id                String              @id @default(cuid())
  code              String              @unique
  name              String
  bagianKerja       String?             @map("bagian_kerja") // Maps to data_karyawan.bagian_kerja
  schoolId          String?             @map("school_id")
  school            School?             @relation(fields: [schoolId], references: [id])
  parentId          String?             @map("parent_id")
  parent            Department?         @relation("DepartmentHierarchy", fields: [parentId], references: [id])
  children          Department[]        @relation("DepartmentHierarchy")
  description       String?
  isActive          Boolean             @default(true) @map("is_active")
  createdAt         DateTime            @default(now()) @map("created_at")
  updatedAt         DateTime            @updatedAt @map("updated_at")
  
  // Relations
  positions         Position[]
  
  @@index([bagianKerja])
  @@map("departments")
  @@schema("gloria_ops")
}

// Position/Jabatan master data
model Position {
  id                String              @id @default(cuid())
  code              String              @unique
  name              String
  departmentId      String?             @map("department_id")
  department        Department?         @relation(fields: [departmentId], references: [id])
  schoolId          String?             @map("school_id")
  school            School?             @relation(fields: [schoolId], references: [id])
  hierarchyLevel    Int                 @map("hierarchy_level")
  maxHolders        Int                 @default(1) @map("max_holders")
  isUnique          Boolean             @default(true) @map("is_unique")
  isActive          Boolean             @default(true) @map("is_active")
  createdAt         DateTime            @default(now()) @map("created_at")
  updatedAt         DateTime            @updatedAt @map("updated_at")
  
  // Relations
  userPositions     UserPosition[]
  hierarchies       PositionHierarchy[] @relation("PositionRelation")
  reportsTo         PositionHierarchy[] @relation("ReportsToRelation")
  coordinates       PositionHierarchy[] @relation("CoordinatorRelation")
  roleTemplates     RoleModuleAccess[]
  
  @@map("positions")
  @@schema("gloria_ops")
}

// User position assignments (history supported)
model UserPosition {
  id                String              @id @default(cuid())
  userProfileId     String              @map("user_profile_id")
  userProfile       UserProfile         @relation(fields: [userProfileId], references: [id])
  positionId        String              @map("position_id")
  position          Position            @relation(fields: [positionId], references: [id])
  startDate         DateTime            @map("start_date")
  endDate           DateTime?           @map("end_date")
  isActive          Boolean             @default(true) @map("is_active")
  isPlt             Boolean             @default(false) @map("is_plt")
  appointedBy       String?             @map("appointed_by") // Clerk user ID
  skNumber          String?             @map("sk_number")
  notes             String?
  createdAt         DateTime            @default(now()) @map("created_at")
  updatedAt         DateTime            @updatedAt @map("updated_at")
  
  @@unique([userProfileId, positionId, startDate])
  @@index([userProfileId, isActive])
  @@index([positionId, isActive])
  @@map("user_positions")
  @@schema("gloria_ops")
}

// Position hierarchy and reporting structure
model PositionHierarchy {
  id                String              @id @default(cuid())
  positionId        String              @map("position_id")
  position          Position            @relation("PositionRelation", fields: [positionId], references: [id])
  reportsToId       String?             @map("reports_to_id")
  reportsTo         Position?           @relation("ReportsToRelation", fields: [reportsToId], references: [id])
  coordinatorId     String?             @map("coordinator_id")
  coordinator       Position?           @relation("CoordinatorRelation", fields: [coordinatorId], references: [id])
  
  @@unique([positionId])
  @@map("position_hierarchy")
  @@schema("gloria_ops")
}

// ==================== ROLES & PERMISSIONS ====================

model Role {
  id                String              @id @default(cuid())
  code              String              @unique
  name              String
  description       String?
  hierarchyLevel    Int                 @map("hierarchy_level")
  isSystemRole      Boolean             @default(false) @map("is_system_role")
  isActive          Boolean             @default(true) @map("is_active")
  createdAt         DateTime            @default(now()) @map("created_at")
  updatedAt         DateTime            @updatedAt @map("updated_at")
  createdBy         String?             @map("created_by") // Clerk user ID
  
  // Relations
  userRoles         UserRole[]
  moduleAccess      RoleModuleAccess[]
  
  @@map("roles")
  @@schema("gloria_ops")
}

model UserRole {
  id                String              @id @default(cuid())
  userProfileId     String              @map("user_profile_id")
  userProfile       UserProfile         @relation(fields: [userProfileId], references: [id], onDelete: Cascade)
  roleId            String              @map("role_id")
  role              Role                @relation(fields: [roleId], references: [id])
  assignedAt        DateTime            @default(now()) @map("assigned_at")
  assignedBy        String?             @map("assigned_by") // Clerk user ID
  validFrom         DateTime            @default(now()) @map("valid_from")
  validUntil        DateTime?           @map("valid_until")
  isActive          Boolean             @default(true) @map("is_active")
  
  @@unique([userProfileId, roleId])
  @@index([userProfileId, isActive])
  @@map("user_roles")
  @@schema("gloria_ops")
}

// ==================== MODULES & ACCESS CONTROL ====================

model Module {
  id                String              @id @default(cuid())
  code              String              @unique
  name              String
  category          ModuleCategory
  description       String?
  icon              String?
  path              String?             // Route path for frontend
  parentId          String?             @map("parent_id")
  parent            Module?             @relation("ModuleHierarchy", fields: [parentId], references: [id])
  children          Module[]            @relation("ModuleHierarchy")
  sortOrder         Int                 @default(0) @map("sort_order")
  isActive          Boolean             @default(true) @map("is_active")
  isVisible         Boolean             @default(true) @map("is_visible")
  requiredPlan      String?             @map("required_plan") // For feature gating
  createdAt         DateTime            @default(now()) @map("created_at")
  updatedAt         DateTime            @updatedAt @map("updated_at")
  
  // Relations
  permissions       ModulePermission[]
  roleAccess        RoleModuleAccess[]
  userAccess        UserModuleAccess[]
  overrides         UserOverride[]
  
  @@map("modules")
  @@schema("gloria_ops")
}

model ModulePermission {
  id                String              @id @default(cuid())
  moduleId          String              @map("module_id")
  module            Module              @relation(fields: [moduleId], references: [id], onDelete: Cascade)
  action            PermissionAction
  scope             PermissionScope
  description       String?
  
  @@unique([moduleId, action, scope])
  @@map("module_permissions")
  @@schema("gloria_ops")
}

// Role-based module access (Template)
model RoleModuleAccess {
  id                String              @id @default(cuid())
  roleId            String              @map("role_id")
  role              Role                @relation(fields: [roleId], references: [id], onDelete: Cascade)
  moduleId          String              @map("module_id")
  module            Module              @relation(fields: [moduleId], references: [id], onDelete: Cascade)
  positionId        String?             @map("position_id")
  position          Position?           @relation(fields: [positionId], references: [id])
  permissions       Json                // ["create", "read", "update", "delete", "approve"]
  isActive          Boolean             @default(true) @map("is_active")
  createdAt         DateTime            @default(now()) @map("created_at")
  updatedAt         DateTime            @updatedAt @map("updated_at")
  createdBy         String?             @map("created_by") // Clerk user ID
  
  @@unique([roleId, moduleId])
  @@map("role_module_access")
  @@schema("gloria_ops")
}

// User-specific module access (Direct assignment)
model UserModuleAccess {
  id                String              @id @default(cuid())
  userProfileId     String              @map("user_profile_id")
  userProfile       UserProfile         @relation(fields: [userProfileId], references: [id], onDelete: Cascade)
  moduleId          String              @map("module_id")
  module            Module              @relation(fields: [moduleId], references: [id], onDelete: Cascade)
  permissions       Json                // ["create", "read", "update", "delete", "approve"]
  validFrom         DateTime            @default(now()) @map("valid_from")
  validUntil        DateTime?           @map("valid_until")
  grantedBy         String              @map("granted_by") // Clerk user ID
  reason            String?
  isActive          Boolean             @default(true) @map("is_active")
  createdAt         DateTime            @default(now()) @map("created_at")
  updatedAt         DateTime            @updatedAt @map("updated_at")
  
  @@index([userProfileId, moduleId, isActive])
  @@map("user_module_access")
  @@schema("gloria_ops")
}

// User permission overrides (Exceptions)
model UserOverride {
  id                String              @id @default(cuid())
  userProfileId     String              @map("user_profile_id")
  userProfile       UserProfile         @relation(fields: [userProfileId], references: [id], onDelete: Cascade)
  moduleId          String              @map("module_id")
  module            Module              @relation(fields: [moduleId], references: [id], onDelete: Cascade)
  permissionType    PermissionAction    @map("permission_type")
  isGranted         Boolean             @map("is_granted")
  validFrom         DateTime            @default(now()) @map("valid_from")
  validUntil        DateTime?           @map("valid_until")
  reason            String
  grantedBy         String              @map("granted_by") // Clerk user ID
  createdAt         DateTime            @default(now()) @map("created_at")
  updatedAt         DateTime            @updatedAt @map("updated_at")
  
  @@index([userProfileId, moduleId, isGranted])
  @@map("user_overrides")
  @@schema("gloria_ops")
}

// ==================== APPROVAL SYSTEM ====================

model ApprovalMatrix {
  id                String              @id @default(cuid())
  module            String
  requesterRole     String?             @map("requester_role")
  requesterPosition String?             @map("requester_position")
  approvalSequence  Int                 @map("approval_sequence")
  approverType      ApproverType        @map("approver_type")
  approverValue     String              @map("approver_value") // position_code, department_code, or user_id
  conditions        Json?               // {"days": ">3", "amount": ">1000000"}
  isActive          Boolean             @default(true) @map("is_active")
  createdAt         DateTime            @default(now()) @map("created_at")
  updatedAt         DateTime            @updatedAt @map("updated_at")
  createdBy         String?             @map("created_by") // Clerk user ID
  
  @@unique([module, requesterRole, approvalSequence])
  @@index([module, isActive])
  @@map("approval_matrix")
  @@schema("gloria_ops")
}

model Request {
  id                String              @id @default(cuid())
  requestNumber     String              @unique @map("request_number")
  module            String
  requesterProfileId String             @map("requester_profile_id")
  requester         UserProfile         @relation("RequesterRelation", fields: [requesterProfileId], references: [id])
  requestType       String              @map("request_type")
  details           Json
  status            RequestStatus       @default(PENDING)
  currentStep       Int                 @default(1) @map("current_step")
  completedAt       DateTime?           @map("completed_at")
  cancelledAt       DateTime?           @map("cancelled_at")
  cancelReason      String?             @map("cancel_reason")
  createdAt         DateTime            @default(now()) @map("created_at")
  updatedAt         DateTime            @updatedAt @map("updated_at")
  
  // Relations
  approvalSteps     ApprovalStep[]
  attachments       RequestAttachment[]
  
  @@index([requesterProfileId, status])
  @@index([module, status])
  @@map("requests")
  @@schema("gloria_ops")
}

model ApprovalStep {
  id                String              @id @default(cuid())
  requestId         String              @map("request_id")
  request           Request             @relation(fields: [requestId], references: [id], onDelete: Cascade)
  sequence          Int
  approverProfileId String              @map("approver_profile_id")
  approver          UserProfile         @relation("ApproverRelation", fields: [approverProfileId], references: [id])
  approverType      String              @map("approver_type") // KABAG, KOORDINATOR, etc
  status            ApprovalStatus      @default(WAITING)
  action            ApprovalAction?
  notes             String?
  approvedAt        DateTime?           @map("approved_at")
  createdAt         DateTime            @default(now()) @map("created_at")
  updatedAt         DateTime            @updatedAt @map("updated_at")
  
  @@unique([requestId, sequence])
  @@index([approverProfileId, status])
  @@map("approval_steps")
  @@schema("gloria_ops")
}

model ApprovalDelegation {
  id                String              @id @default(cuid())
  delegatorProfileId String             @map("delegator_profile_id")
  delegator         UserProfile         @relation("DelegatorRelation", fields: [delegatorProfileId], references: [id])
  delegateProfileId String              @map("delegate_profile_id")
  delegate          UserProfile         @relation("DelegateRelation", fields: [delegateProfileId], references: [id])
  module            String?             // Specific module or null for all
  startDate         DateTime            @map("start_date")
  endDate           DateTime            @map("end_date")
  reason            String?
  isActive          Boolean             @default(true) @map("is_active")
  createdAt         DateTime            @default(now()) @map("created_at")
  updatedAt         DateTime            @updatedAt @map("updated_at")
  createdBy         String?             @map("created_by") // Clerk user ID
  
  @@index([delegatorProfileId, isActive])
  @@index([delegateProfileId, isActive])
  @@map("approval_delegations")
  @@schema("gloria_ops")
}

model RequestAttachment {
  id                String              @id @default(cuid())
  requestId         String              @map("request_id")
  request           Request             @relation(fields: [requestId], references: [id], onDelete: Cascade)
  fileName          String              @map("file_name")
  fileUrl           String              @map("file_url")
  fileSize          Int                 @map("file_size")
  mimeType          String              @map("mime_type")
  uploadedBy        String              @map("uploaded_by") // Clerk user ID
  createdAt         DateTime            @default(now()) @map("created_at")
  
  @@map("request_attachments")
  @@schema("gloria_ops")
}

// ==================== SYSTEM TABLES ====================

model Notification {
  id                String              @id @default(cuid())
  userProfileId     String              @map("user_profile_id")
  userProfile       UserProfile         @relation(fields: [userProfileId], references: [id], onDelete: Cascade)
  type              NotificationType
  title             String
  message           String              @db.Text
  data              Json?
  priority          Priority            @default(MEDIUM)
  isRead            Boolean             @default(false) @map("is_read")
  readAt            DateTime?           @map("read_at")
  createdAt         DateTime            @default(now()) @map("created_at")
  
  @@index([userProfileId, isRead])
  @@map("notifications")
  @@schema("gloria_ops")
}

// Enhanced Audit Log with old/new values
model AuditLog {
  id                String              @id @default(cuid())
  actorId           String              @map("actor_id") // Clerk user ID who performed action
  actorProfileId    String?             @map("actor_profile_id")
  actorProfile      UserProfile?        @relation("ActorRelation", fields: [actorProfileId], references: [id])
  action            AuditAction
  module            String
  entityType        String              @map("entity_type") // Table/Model name
  entityId          String              @map("entity_id")
  entityDisplay     String?             @map("entity_display") // Human readable identifier
  oldValues         Json?               @map("old_values") // Previous state
  newValues         Json?               @map("new_values") // New state
  changedFields     Json?               @map("changed_fields") // List of changed field names
  targetUserId      String?             @map("target_user_id") // If action affects another user
  targetProfile     UserProfile?        @relation("TargetRelation", fields: [targetUserId], references: [id])
  metadata          Json?               // Additional context (IP, user agent, etc)
  ipAddress         String?             @map("ip_address")
  userAgent         String?             @map("user_agent")
  createdAt         DateTime            @default(now()) @map("created_at")
  
  @@index([actorId, createdAt])
  @@index([module, action, createdAt])
  @@index([entityType, entityId, createdAt])
  @@map("audit_logs")
  @@schema("gloria_ops")
}

// ==================== ENUMS ====================

enum ModuleCategory {
  SERVICE     // Work Order IT, GA
  PERFORMANCE // KPI, Peer Evaluation, Evaluasi Kegiatan
  QUALITY     // ICS, Sasaran Mutu, Alat Ukur
  FEEDBACK    // Angket Staf
  TRAINING    // Training Management
  SYSTEM      // System modules

  @@schema("gloria_ops")
}

enum PermissionAction {
  CREATE
  READ
  UPDATE
  DELETE
  APPROVE
  EXPORT
  IMPORT
  PRINT
  ASSIGN
  CLOSE

  @@schema("gloria_ops")
}

enum PermissionScope {
  OWN         // Data sendiri
  DEPARTMENT  // Data departemen
  SCHOOL      // Data sekolah
  ALL         // Semua data

  @@schema("gloria_ops")
}

enum ApproverType {
  POSITION       // Based on position (Kabag, Koordinator)
  DEPARTMENT     // Based on department (HRD Staff, PPM Staff)
  SPECIFIC_USER  // Specific user
  ROLE          // Based on role

  @@schema("gloria_ops")
}

enum RequestStatus {
  DRAFT
  PENDING
  IN_PROGRESS
  APPROVED
  REJECTED
  CANCELLED
  COMPLETED

  @@schema("gloria_ops")
}

enum ApprovalStatus {
  WAITING
  PENDING
  APPROVED
  REJECTED
  RETURNED
  SKIPPED
  DELEGATED

  @@schema("gloria_ops")
}

enum ApprovalAction {
  APPROVE
  REJECT
  RETURN
  ESCALATE
  DELEGATE

  @@schema("gloria_ops")
}

enum Priority {
  LOW
  MEDIUM
  HIGH
  URGENT
  CRITICAL

  @@schema("gloria_ops")
}

enum NotificationType {
  APPROVAL_REQUEST
  APPROVAL_RESULT
  WORK_ORDER_UPDATE
  KPI_REMINDER
  TRAINING_INVITATION
  SYSTEM_ALERT
  GENERAL
  DELEGATION

  @@schema("gloria_ops")
}

enum AuditAction {
  CREATE
  UPDATE
  DELETE
  APPROVE
  REJECT
  LOGIN
  LOGOUT
  EXPORT
  IMPORT
  ASSIGN
  REVOKE
  DELEGATE

  @@schema("gloria_ops")
}